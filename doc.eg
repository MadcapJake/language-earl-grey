;; This is the Earl Grey docs page turned into EG with comments for
;; markup

;; ============
;; BASIC SYNTAX
;; ============

;; === Comments ===
;; Comments must be prefixed with two semicolons until the end of the
;; line.

;; ;; This is a comment

;; === Blocks ===
;; Indent groups statements in Earl Grey. Alternatively, you can use
;; square brackets `[]`:

hello
   superb
   world

;; is equivalent to:

hello[superb; world]

;; It is recommended to use indent to denote blocks, so you will not use
;; square brackets much in practice.  Just be aware that the expression
;; `[a]` is equivalent to plain `a` and `[a, b, c]` os going to return
;; `c` (commas and semi-colons are equivalent in EG).

;; Save for indented blocks, *all* line breaks are semi-colons in Earl
;; Grey. There is *no* implicit line continuation. This being said, you
;; can break a statement over multiple lines by *prefixing* continuating
;; lines with `\` :

a
\ + b
\ + c

;; is equivalent to:

a + b + c

;; Be aware that indent isn't going to work for this: replacing the
;; backslashes with indent will yield `a[+ b; + c]`.

;; =========
;; VARIABLES
;; =========

;; Variables can be declared as mutable or immutable:

var x = 123 ;; mutable variable
let y = "hello" ;; const variable (immutable)

;; Hyphens are allowed inside variable names. This is valid:

var my-variable = 1234

;; Scoping is lexical: variables declared in a block are only valid in
;; that block. If you simply write:

x = {1, 2, 3}

;; Then what happens depends on whether a variable called `x` already
;; exists in scope.

;; * It _exists_ and is _mutable_: the variable is modified
;; * It _exists_ and is _mutable_: compile time error
;; * It _doesn't exist_: it's declared in current block as *immutable*

;; This means that most of the time you can declare variables without
;; the `let` keyword, assuming they don't already exist.  You only need
;; `let` if you are shadowing an existing variable. I recommend only
;; using `var` if absolutely necessary--if you follow that advice it is
;; basically impossible to make scoping errors.

;; Note that the `var` and `let` keywords can be used inside patterns.
;; For instance:

{var {x, y}, let z} = {{1, 2}, 3}  ;; x and y are mutable; z isn't

;; The _where_ statement is another alternative to declare variables
;; local to single expression.  Here's a funny example:

x + y where
   x = 100
   y = 200
   x + y = x - y  ;; => -100

;; Yes, you can do that

;; === Global variables ===
;; Global variables need to be declared to be accessible:

globals:
   document, google, React

;; ============================
;; LITERALS AND DATA STRUCTURES
;; ============================

;; === Strings ===
;; Use double quotes:

"this is a string"
"Escape \" with a backslash"
'single-quoted strings support interpolation'
"""this is a
   "long"
   multiline string"""

;; The prefix dot operator creates a string as well, but only if the
;; string represents a valid variable name:

.hello == "hello"

;; If there are dashes in a dot-string, it is converted to camelCase:

.hello-world == "helloWorld"

;; This means that if you write a method call with dashes, for instance
;; `document.get-element-by-id("some-id")`, it will compile to
;; `document.getElementByID("some-id")`.  You have the choice of either
;; notation.

;; === Interpolated Strings ===
;; Single quotes are Interpolated

n = 3
print 'there are {n} little piggies'
;; => there are 3 little piggies

;; === Numbers ===

123               ;; decimal
16rDEADBEEF       ;; hex
2r100101011.101   ;; binary

;; === Arrays and Objects ===
;; Both arrays and object literals are defined with curly braces:

{1, 2, 3}              ;; an array
{a = 1, b = 2}         ;; an object
{"a" => 1, "b" => 2}   ;; the same object

;; You can also "mix" the notations:

{1, 2, a = 3, "b" = 4} ;; an array with fields named a and b

;; Empty data structures are denoted as follows:

empty-array = {}
empty-object = {=}

;; =========
;; FUNCTIONS
;; =========

;; There are several different, but equivalent notations to call
;; functions:

func(arg1, arg2)            ;; the usual notation
func{arg1, arg2}            ;; curly bracket notation
func(arg1) with arg2        ;; with-notation
func(___, arg2) with arg1   ;; with-notation (using placeholder)
func with arg               ;; with-notation (single argument)

;; The with-notation can be used to increase readability. For instance:

{1, 2, 3}.map(x -> x * x)
{1, 2, 3}.map with x ->
   x * x

;; The gains are most visible when the body of the function is large.
