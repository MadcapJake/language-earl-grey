;; This is the Earl Grey docs page turned into EG with comments for markup

;; Basic Syntax

;; Comments
;; Comments must be prefixed with two semicolons until the end of the line.

;; ;; This is a comment

;; Blocks
;; Indent groups statements in Earl Grey. Alternatively, you can use square
;; brackets `[]`:

hello
   superb
   world

;; is equivalent to:

hello[superb; world]

;; It is recommended to use indent to denote blocks, so you will not use
;; square brackets much in practice.  Just be aware that the expression `[a]`
;; is equivalent to plain `a` and `[a, b, c]` os going to return `c` (commas
;; and semi-colons are equivalent in EG).

;; Save for indented blocks, *all* line breaks are semi-colons in Earl Grey.
;; There is *no* implicit line continuation. This being said, you can break a
;; statement over multiple lines by *prefixing* continuating lines with `\` :

a
\ + b
\ + c

;; is equivalent to:

a + b + c

;; Be aware that indent isn't going to work for this: replacing the backslashes
;; with indent will yield `a[+ b; + c]`.

;; Variables

;; Variables can be declared as mutable or immutable:

var x = 123 ;; mutable variable
let y = "hello" ;; const variable (immutable)

;; Hyphens are allowed inside variable names. This is valid:

var my-variable = 1234

;; Scoping is lexical: variables declared in a block are only valid in that
;; block.  If you simply write:

x = {1, 2, 3}

;; Then what happens depends on whether a variable called `x` already exists in
;; scope.

;; * It _exists_ and is _mutable_: the variable is modified
;; * It _exists_ and is _mutable_: compile time error
;; * It _does not exist_: it is declared in the current block as *immutable*

;; This means that most of the time you can declare variables without the `let`
;; keyword, assuming they don't already exist.  You only need `let` if you are
;; shadowing an existing variable. I recommend only using `var` if absolutely
;; necessary--if you follow that advice it is basically impossible to make
;; scoping errors.

;; Note that the `var` and `let` keywords can be used inside patterns. For
;; instance:

{var {x, y}, let z} = {{1, 2}, 3}  ;; x and y are mutable; z isn't
