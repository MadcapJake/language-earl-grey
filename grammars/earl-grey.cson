'scopeName': 'source.earl-grey'
'fileTypes': [
  'eg'
]
'name': 'Earl Grey'
'patterns': [
  {
    'begin': '(^[ \\t]+)?(?=;;)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.earl-grey'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': ';;'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.earl-grey'
        'end': '\\n'
        'name': 'comment.line.double-semicolon.earl-grey'
      }
    ]
  }
  {
    'match': '->'
    'name': 'storage.type.function.earl-grey'
  }
  {
    'match': '\\b(?<!\\.)(true)(?!\\s*[:=][^=])\\b'
    'name': 'constant.language.boolean.true.earl-grey'
  }
  {
    'match': '\\b(?<!\\.)(false)(?!\\s*[:=][^=])\\b'
    'name': 'constant.language.boolean.false.earl-grey'
  }
  {
    'match': '\\b(?<!\\.)(undefined)(?!\\s*[:=][^=])\\b'
    'name': 'constant.language.undefined.earl-grey'
  }
  {
    'match': '\\b(?<!\\.)(null)(?!\\s*[:=][^=])\\b'
    'name': 'constant.language.null.earl-grey'
  }
  {
    'match': '\\b(?<!\\.)(this)(?!\\s*[:=][^=])\\b'
    'name': 'variable.language.this.earl-grey'
  }
  {
    'include': '#operator'
  }
  {
    'include': '#number'
  }
  {
    'include': '#string'
  }
  {
    'include': '#method'
  }
  {
    'comment': 'postcircumfix curly function call'
    'begin': '(?=[a-zA-Z$_](?:[a-zA-Z$_0-9-]*[a-zA-Z$_0-9])?(?:\\.[a-zA-Z$_](?:[a-zA-Z$_0-9-]*[a-zA-Z$_0-9])?)*\\s*\\{)'
    'end': '(\\})'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.arguments.curly.end.earl-grey'
    'name': 'meta.function-call.curly.earl-grey'
    'patterns': [
      {
        'begin': '(\\{)'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.arguments.curly.begin.earl-grey'
        'contentName': 'meta.function-call.curly.arguments.earl-grey'
        'end': '(?=\\})'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  }
  {
    'comment': 'postcircumfix parens function call'
    'begin': '(?=[a-zA-Z$_](?:[a-zA-Z$_0-9-]*[a-zA-Z$_0-9])?(?:\\.[a-zA-Z$_](?:[a-zA-Z$_0-9-]*[a-zA-Z$_0-9])?)*\\s*\\()'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.arguments.paren.end.earl-grey'
    'name': 'meta.function-call.paren.earl-grey'
    'patterns': [
      {
        'begin': '(\\()'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.arguments.paren.begin.earl-grey'
        'contentName': 'meta.function-call.paren.arguments.earl-grey'
        'end': '(?=\\))'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  }
  {
    'include': '#keyword'
  }
]
'repository':
  keyword:
    'patterns': [
      {
        'begin': '(?x)
          (?<=^|[^\\w\\$])
          (?!(?:and|as|each\\*|each|in|is|mod|not|of|or|when|where|with)\\s)
          ([a-zA-Z$_](?:[a-zA-Z$0-9_-]*[a-zA-Z$0-9_])?)\\s+
          (
            (?=[+\\-*/~^<>=%&|?!#][a-zA-Z$0-9_])|
            (?!(?:and|as|each\\*|each|in|is|mod|not|of|or|when|where|with):?\\s)
            (?=@?[a-zA-Z$0-9_](?:[a-zA-Z$0-9_-]*[a-zA-Z$0-9_])?)|
            (?=\\..*?(?=[\\s;,]))|
            (?=(?:\\"{3}|[\\"\\\\\']).*(?:\\"{3}|[\\"\\\\\']))|
            (?=\\d(?:[\\.\\w]*\\d)?)
          )'
        'beginCaptures':
          '1':
            'name': 'entity.name.function.keyword.earl-grey'
          '2':
            'name': 'invalid.illegal.postfix.earl-grey'
        'end': '(?=$\\n?|[;,])'
        'name': 'meta.symbol.macro.control.open.earl-grey'
        'patterns': [
          {
            'include': '#keyword'
          }
          {
            'include': '#operator'
          }
          {
            'include': '#string'
          }
          {
            'include': '#number'
          }
          {
            'include': '#method'
          }
        ]
      }
      {
        'begin': '(?x)
          (?:
            ^|
            \\s(?:=|=>|->|%|with|where|each|each\\*|where|with)\\s+|
            \\S+(?<![+\\-*/~^<>%&|?!@#.])\\s+
          )
          (?!(?:and|as|each\\*|each|in|is|mod|not|of|or|when|where|with)\\s)
          ([a-zA-Z$_](?:[a-zA-Z$0-9_-]*[a-zA-Z$0-9_])?)
          (\\:)\\s+
          (?:
            (?=$\\n?)|
            (?=[+\\-*/~^<>=%&|?!#][a-zA-Z$0-9_])|
            (?!(?:and|as|each\\*|each|in|is|mod|not|of|or|when|where|with):?\\s)
            (?=@?[a-zA-Z$0-9_](?:[a-zA-Z$0-9_-]*[a-zA-Z$0-9_])?)|
            (?=\\..*?(?=[\\s;,]))|
            (?=(?:\\"{3}|[\\"\\\\\']).*(?:\\"{3}|[\\"\\\\\']))|
            (?=\\d(?:[\\.\\w]*\\d)?)
          )'
        'beginCaptures':
          '1':
            'name': 'entity.name.function.keyword.earl-grey'
          '2':
            'name': 'punctuation.section.control.delimiter.earl-grey'
        'end': '(?=$\\n?|[;,])'
        'name': 'meta.symbol.macro.control.colon.earl-grey'
        'patterns': [
          {
            'include': '#keyword'
          }
          {
            'include': '#operator'
          }
          {
            'include': '#string'
          }
          {
            'include': '#number'
          }
          {
            'include': '#method'
          }
        ]
      }
    ]
  number:
    'patterns': [
      {
        'match': '\\b(\\d+[rR]\\w+(?:\\.[a-zA-Z0-9]+)?)\\b'
        'name': 'constant.numeric.radix.earl-grey'
      }
      {
        'match': '\\b(?i:(\\d[0-9_]*(?:\\.[0-9_]+)?(?:e[\\+\\-]?[0-9_]+)?))'
        'name': 'constant.numeric.decimal.earl-grey'
      }
    ]
  string:
    'patterns': [
      {
        'match': '(\\.)([a-zA-Z$_](?:[a-zA-Z$_0-9-]*[a-zA-Z$_0-9])?)(?=[\\(\\{\\[\\s;,:])'
        'captures':
          '1':
            'name': 'punctuation.definition.string.dot.earl-grey'
          '2':
            'name': 'string.dotted.earl-grey'
        'name': 'meta.string.dotted.earl-grey'
      }
      {
        'begin': '"{3}'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.earl-grey'
        'end': '"{3}'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.earl-grey'
        'name': 'string.quoted.multi-line.earl-grey'
      }
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.earl-grey'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.earl-grey'
        'name': 'string.quoted.double.earl-grey'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.earl-grey'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.earl-grey'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.earl-grey'
        'name': 'string.quoted.single.earl-grey'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.earl-grey'
          }
          {
            'begin': '(?<!\\\\\)\\{'
            'beginCaptures':
              '0':
                'name': 'punctuation.section.embedded.begin.earl-grey'
            'end': '(?<!\\\\\)\\}'
            'endCaptures':
              '0':
                'name': 'punctuation.section.embedded.end.earl-grey'
            'name': 'source.earl-grey.embedded.source'
            'patterns': [
              {
                'include': '#operator'
              }
              {
                'include': '#string'
              }
              # {
              #   'include': '#symbol'
              # }
              {
                'include': '#number'
              }
              {
                'include': '#method'
              }
            ]
          }
        ]
      }
    ]
  method:
    'patterns': [
      {
        'match': '(?<=^|\\s)(@[a-zA-Z$_0-9](?:[a-zA-Z$_0-9-]*[a-zA-Z$_0-9])?)\\b'
        'name': 'entity.other.attribute-name.method.earl-grey'
      }
    ]
  symbol:
    'patterns': [
      {
        'comment': 'A symbol is any sequence of word characters and dashes'
        'match': '\\b[\\w\\$](?:[\\w\\$\\-]*[\\w\\$])?\\b'
        'name': 'meta.keyword.symbol.earl-grey'
      }
    ]
  operator:
    'patterns': [
      {
        'match': '([+\\-*/~^<>=%&|?!#]+)(?!\\s*:)|([\\.@](?=\\s))'
        'name': 'keyword.operator.char.earl-grey'
      }
      {
        'match': '(?<=\\s)((?:each|with|where|when|and|not|or|in|mod|as|of|is)\\*?)(?![\\w\\$\\-])'
        'name': 'keyword.other.word-op.earl-grey'
      }
    ]
