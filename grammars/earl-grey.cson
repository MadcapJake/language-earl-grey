'scopeName': 'source.earl-grey'
'fileTypes': [
  'eg'
]
'name': 'Earl Grey'
'patterns': [
  # {
  #   'begin': '(^[ \\t]+)?(?=;;)'
  #   'beginCaptures':
  #     '1':
  #       'name': 'punctuation.whitespace.comment.leading.earl-grey'
  #   'end': '(?!\\G)'
  #   'patterns': [
  #     {
  #       'begin': ';;'
  #       'beginCaptures':
  #         '0':
  #           'name': 'punctuation.definition.comment.earl-grey'
  #       'end': '\\n'
  #       'name': 'comment.line.double-semicolon.earl-grey'
  #     }
  #   ]
  # }
  # {
  #   'match': '\\b(?i:(\\d[0-9_]*(?:\\.[0-9_]+)?(?:e[\\+\\-]?[0-9_]+)?))'
  #   'name': 'constant.numeric.decimal.earl-grey'
  # }
  # {
  #   'match': '\\b(\\d[0-9_]*[rR]\\w*(?:\\.\\w+)?)'
  #   'name': 'constant.numeric.radix.earl-grey'
  # }
  # {
  #   'begin': '"{3}'
  #   'beginCaptures':
  #     '0':
  #       'name': 'punctuation.definition.string.begin.earl-grey'
  #   'end': '"{3}'
  #   'endCaptures':
  #     '0':
  #       'name': 'punctuation.definition.string.end.earl-grey'
  #   'name': 'string.quoted.multi-line.earl-grey'
  # }
  # {
  #   'begin': '"'
  #   'beginCaptures':
  #     '0':
  #       'name': 'punctuation.definition.string.begin.earl-grey'
  #   'end': '"'
  #   'endCaptures':
  #     '0':
  #       'name': 'punctuation.definition.string.end.earl-grey'
  #   'name': 'string.quoted.double.earl-grey'
  #   'patterns': [
  #     {
  #       'match': '\\\\.'
  #       'name': 'constant.character.escape.earl-grey'
  #     }
  #   ]
  # }
  # {
  #   'begin': '\''
  #   'beginCaptures':
  #     '0':
  #       'name': 'punctuation.definition.string.begin.earl-grey'
  #   'end': '\''
  #   'endCaptures':
  #     '0':
  #       'name': 'punctuation.definition.string.end.earl-grey'
  #   'name': 'string.quoted.single.earl-grey'
  #   'patterns': [
  #     {
  #       'match': '\\\\.'
  #       'name': 'constant.character.escape.earl-grey'
  #     }
  #     {
  #       'begin': '(?<!\\){'
  #       'beginCaptures':
  #         '0':
  #           'name': 'punctuation.section.interpolation.begin.earl-grey'
  #       'end': '(?<!\\)}'
  #       'endCaptures':
  #         '0':
  #           'name': 'punctuation.section.interpolation.end.earl-grey'
  #       'name': 'source.earl-grey.embedded.source'
  #     }
  #   ]
  # }
  # {
  #   'begin': '(\\.)(?=[a-zA-Z])'
  #   'beginCaptures':
  #     '0':
  #       'name': 'punctuation.definition.string.dot.earl-grey'
  #   'end': '(?<=[a-zA-Z0-9_-])(?:\\w)(?=[^a-zA-Z0-9_-])'
  #   'name': 'string.dotted.earl-grey'
  # }
  # {
  #   'match':
  #     '\\b(\\w(?:[a-zA-Z0-9_-]*\\w)?)(?:\\s+(\\w(?:[a-zA-Z0-9_-]*\\w)))?
  #     (?:(?=[^a-bA-Z0-9_-])|\\b)'
  #   'captures':
  #     '1':
  #       'name': 'keyword.control.symbol.key.earl-grey'
  #     '2':
  #       'name': 'entity.name.control.symbol.expression.earl-grey'
  #   'name': 'meta.symbol.macro.earl-grey'
  # }
]
# 'repository':
#   'symbol':
#     'patterns': [
#       {
#         'comment': 'A symbol is any sequence of word characters and dashes'
#         'match': '\\b\\w[a-zA-Z0-9_-]*\\w\\b'
#         'name': 'keyword.control.symbol.earl-grey'
#       }
#     ]
#   'operator':
#     'patterns': [
#       {
#         'match': '\\b(as|each|in|is|mod|not|of|or|when|where|with|and\\=|or\=|mod\=|each\=|each\*|each*=|is\*|not\*\*\*)\\b'
#         'name': 'keyword.operator.earl-grey'
#       }
#     ]
